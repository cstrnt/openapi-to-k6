import fs from 'fs'
import os from 'os'
import path from 'path'
import { promisify } from 'util'
import generator from '../../src/generator'

const writeFile = promisify(fs.writeFile)
const readFile = promisify(fs.readFile)
const mkdtemp = promisify(fs.mkdtemp)
const rmdir = promisify(fs.rmdir)

const fixturesDir = path.join(__dirname, 'fixtures', 'schemas')

const loadFixture = async (filename: string) => {
  const filePath = path.join(fixturesDir, filename)
  const data = await readFile(filePath, 'utf-8')
  return JSON.parse(data)
}

const commonSubstringsForAllSDK = [
  'Automatically generated by',
  'Do not edit manually',
  'OpenAPI spec version',
  'const mergedRequestParameters = _mergeRequestParameters(\n      requestParameters || {},\n      clientOptions.commonRequestParameters,\n    );',
  'try {\n      data = response.json();\n    } catch (error) {\n      data = response.body;\n    }',
  'return {\n      response,\n      data,\n    };',
]

describe('generator', () => {
  let tempDir: string
  const allFixtures = fs.readdirSync(fixturesDir)

  beforeAll(async () => {
    tempDir = await mkdtemp(path.join(os.tmpdir(), 'sdk-generator-'))
  })

  afterAll(async () => {
    await rmdir(tempDir, { recursive: true })
  })

  for (const fixtureName of allFixtures) {
    it(`should generate SDK from ${fixtureName} OpenAPI schema`, async () => {
      const schemaDirectory = await mkdtemp(
        path.join(tempDir, fixtureName.replace('.', '-'))
      )

      const fixture = await loadFixture(fixtureName)
      const expectedGeneratedCode = fixture['expected_sdk']

      const openApiPath = path.join(schemaDirectory, 'openapi-schema.json')
      const generatedSchemaPath = path.join(schemaDirectory, 'generated-schema')
      await writeFile(openApiPath, JSON.stringify(fixture['openapi_schema']))

      await generator(openApiPath, generatedSchemaPath)

      const generatedFiles = fs.readdirSync(generatedSchemaPath)
      expect(generatedFiles.length).toBe(1)
      expect(generatedFiles[0]).toBeDefined()
      const generatedFilePath = path.join(
        generatedSchemaPath,
        generatedFiles[0]!
      )
      const generatedContent = await readFile(generatedFilePath, 'utf-8')

      for (const expectedString of [
        ...expectedGeneratedCode['expectedSubstrings'],
        ...commonSubstringsForAllSDK,
      ]) {
        expect(generatedContent).toContain(expectedString)
      }
    })
  }
})
